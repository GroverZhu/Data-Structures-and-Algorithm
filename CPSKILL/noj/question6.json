[
{"number": "001", "name": "计算A+B", "description": ["计算A+B"], "image_urls": [], "input": "输入整数A和整数B的值，用空格隔开", "output": "输出A+B的结果", "sample_input": "1 2", "sample_output": "3"},
{"number": "040", "name": "方差", "description": ["编写函数计算", "其中x为x1,x2,……的平均数。请记住：不能使用数组。"], "image_urls": ["poj/images/80/8000030003.jpg"], "input": "第1行输入n，为整型", "output": "输出s，double型，小数点后6位。", "sample_input": "5\r1 2 3 4 5", "sample_output": "10.000000"},
{"number": "039", "name": "数据加密", "description": ["某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的。加密函数如下：每位数字都加上5，然后用除以10的余数代替该数字，再将第一位和第四位交换，第二位和第三位交换。"], "image_urls": [], "input": "输入整型", "output": "输出整型", "sample_input": "1998", "sample_output": "3446"},
{"number": "038", "name": "发工资的日子", "description": ["POJ公司的职员，最盼望的日子就是每月的8号，因为这一天是发工资的日子，养家糊口就靠它了，呵呵。但是对于公司财务部的职员来说，这一天则是最忙碌的一天。财务部的小明最近在考虑一个问题：如果每个员工的工资额都知道，最少需要准备多少张人民币，才能在给每位员工发工资的时候都不用员工找零呢？", "这里假设员工的工资都是正整数，单位元，人民币一共有100元、50元、10元、5元、2元和1元六种。"], "image_urls": [], "input": "输入数据第一行是一个整数n（n＜100），表示员工的人数，然后是n个员工的工资。", "output": "输出一个整数x，表示至少需要准备的人民币张数。", "sample_input": "3\r1 2 3", "sample_output": "4"},
{"number": "037", "name": "最小整数", "description": ["编写函数fceil(x)，返回大于等于x的最小整数，例如fceil(2.8)为3，fceil(-2.8)为-2。"], "image_urls": [], "input": "输入double型x。", "output": "输出整型。", "sample_input": "2.8", "sample_output": "3"},
{"number": "036", "name": "高低交换", "description": ["编写内联函数inline int xchg(unsigned char n)，计算将unsigned char型n的低四位和高四位交换后的结果。在主函数中输入数据调用函数输出结果。"], "image_urls": [], "input": "输入整型", "output": "输出整型", "sample_input": "194", "sample_output": "44"},
{"number": "035", "name": "最大整数", "description": ["编写函数getfloor(x)，返回小于等于x的最大整数，例如getfloor(2.8)为2，getfloor(-2.8)为-3。"], "image_urls": [], "input": "输入double型x。", "output": "输出整型。", "sample_input": "2.8", "sample_output": "2"},
{"number": "034", "name": "不会吧，又是A+B", "description": ["A+B是POJer的最爱。这不，今天这个A+B希望能给大家带来好运，也希望这个题目能唤起大家对ACM的热爱。", "这个题目的A和B不是简单的整数，而是两个时间，A和B 都是由3个整数组成，分别表示时、分、秒。比如，假设A为34 45 56，就表示A所表示的时间是34小时45分钟56秒。"], "image_urls": [], "input": "输入数据每行有6个整数AH、AM、AS、BH、BM、BS，分别表示时间A和B所对应的时分秒。题目保证所有的数据合法。", "output": "输出A+B，每个输出结果也是由时分秒3部分组成，同时也要满足时间的规则（即分和秒的取值范围在0~59），每个输出占一行，并且所有的部分都可以用32位整数表示。", "sample_input": "1 2 3 4 5 6", "sample_output": "5 7 9"},
{"number": "033", "name": "ACKERMAN", "description": ["已知ack函数对于m≥0和n≥0有定义：ack(0,n)=n+1、ack(m,0)=ack(m-1,1)、ack(m,n)=ack(m-1,ack(m,n-1))。输入m和n，求解ack函数。"], "image_urls": [], "input": "输入m和n，均为整型，用空格隔开。", "output": "输出为整型", "sample_input": "3 2", "sample_output": "29"},
{"number": "032", "name": "获取指定二进制位", "description": ["编写函数getbit(n,k)；求出n从右边开始的第k位。在主函数中输入数据并调用该函数输出结果。"], "image_urls": [], "input": "输入整型n和k（1≤k≤16），用空格分隔。", "output": "输出整型。", "sample_input": "128 8", "sample_output": "1"},
{"number": "031", "name": "循环移位", "description": ["编写函数实现value左右循环移位（即移出的位在另一端填入）。函数原型为int move(int value,int n)；其中value为要循环移位的数，n为移位的位数，n的绝对值不大于16，整型为16位。如果n＜0表示左移，n＞0表示右移，n=0表示不移位。在主函数中输入数据并调用该函数输出结果。"], "image_urls": [], "input": "输入value和n，均为整型，用空格隔开", "output": null, "sample_input": "134744064 -8", "sample_output": "134742024"},
{"number": "030", "name": "探索合数世纪", "description": ["若一个世纪的100个年号中不存在一个素数，则这个世纪称为合数世纪。求第n个合数世纪（公元0年起始）。"], "image_urls": [], "input": "输入n，为整数", "output": "输出合数世纪起始与结束年份，用空格隔开", "sample_input": "1", "sample_output": "1671800 1671899"},
{"number": "029", "name": "排列", "description": ["用1、2、3、…、9组成3个三位数：abc、def和ghi，每个数字恰好使用了1次，要求abc：def：ghi=1：2：3。输出所有解。"], "image_urls": [], "input": null, "output": "输出所有解。", "sample_input": null, "sample_output": "192 384 576\r219 438 657\r273 546 819\r327 654 981"},
{"number": "028", "name": "特殊整数", "description": ["设m，n为一位正整数，含有数字m且不能被m整除的n位整数的个数为g，这些整数和为s。计算g、s。"], "image_urls": [], "input": "输入m和n，均为一位正整数，用空格隔开", "output": "输出g、s，均为整数，用空格隔开", "sample_input": "7 5", "sample_output": "32152 1894711910"},
{"number": "027", "name": "解不等式", "description": ["设n为正整数，求解n使不等式", "成立。a,b为上下限。注意：n可能是一个值，也可能是一个区间"], "image_urls": ["poj/images/80/8000022016.jpg"], "input": "输入a和b，均为整型，用空格隔开", "output": "输出n，为整数；若为区间，则输出区间上下限，用空格隔开", "sample_input": "2010 2011", "sample_output": "18611 18621"},
{"number": "026", "name": "幸运数字“7”", "description": ["输出7和7的倍数，还有包含7的数字例如（17，27，37...70，71，72，73...）"], "image_urls": [], "input": "一个整数N。(N不大于30000)", "output": "从小到大排列的不大于N的与7有关的数字，用空格隔开", "sample_input": "20", "sample_output": "7 14 17"},
{"number": "100", "name": "Graveyard", "description": ["Programming contests became so popular in the year 2397 that the governor of New Earck — the largest human-inhabited planet of the galaxy — opened a special Alley of Contestant Memories (ACM) at the local graveyard. The ACM encircles a green park, and holds the holographic statues of famous contestants placed equidistantly along the park perimeter. The alley has to be renewed from time to time when a new group of memorials arrives.", "When new memorials are added, the exact place for each can be selected arbitrarily along the ACM, but the equidistant disposition must be maintained by moving some of the old statues along the alley.", "Surprisingly, humans are still quite superstitious in 24th century: the graveyard keepers believe the holograms are holding dead people souls, and thus always try to renew the ACM with minimal possible movements of existing statues (besides, the holographic equipment is very heavy). Statues are moved along the park perimeter. Your work is to find a renewal plan which minimizes the sum of travel distances of all statues. Installation of a new hologram adds no distance penalty, so choose the places for newcomers wisely!"], "image_urls": [], "input": "Input file contains two integer numbers: n — the number of holographic statues initially located at the ACM, and m — the number of statues to be added (2 ≤ n ≤ 1000, 1 ≤ m ≤ 1000). The length of the alley along the park perimeter is exactly 10 000 feet.Te end of the input is indicated by 0 0.", "output": "Write a single real number to the output file — the minimal sum of travel distances of all statues (in feet). The answer must be precise to at least 4 digits after decimal point.", "sample_input": "2 1\r2 3\r0 0", "sample_output": "1666.6667\r1000.0000"},
{"number": "099", "name": "Favorite number", "description": ["HanBo Favorite number is 1, So he will often use some ways to put some numbers to 1,and to this endless pride.", "He would only two ways will be:", "(1) Put a number m divided by a prime number p . of course, this number must be divisible, i.e m = m / p", "(2) The number m of one minus 1, i.e m = m-1", "There are a whim, he wanted [a, b] interval all the numbers one by one into a 1, which is a huge boring works, so he wanted to know how much he was operating at least in order to achieve the purpose."], "image_urls": [], "input": "Input contains multiple sets of data (1000 data), the end of the input is indicated by 0 0.", "output": "Each data output line, at least operand numbers.", "sample_input": "2 3\r3 5\r11 12\r0 0", "sample_output": "2\r4\r3"},
{"number": "098", "name": "Scoring", "description": ["Judging a programming contest is hard work, with demanding contestants, tedious decisions,and monotonous work. Not to mention the nutritional problems of spending 12 hours with only donuts, pizza, and soda for food. Still, it can be a lot of fun.", "Software that automates the judging process is a great help, but the notorious unreliability of some contest software makes people wish that something better were available. You are part of a group trying to develop better, open source, contest management software, based on the principle of modular design.", "Your component is to be used for calculating the scores of programming contest teams and determining a winner. You will be given the results from several teams and must determine the winner.", "Scoring", "There are two components to a team's score. The first is the number of problems solved. The second is penalty points, which reflects the amount of time and incorrect submissions made before the problem is solved. For each problem solved correctly, penalty points are charged equal to the time at which the problem was solved plus 20 minutes for each incorrect submission. No penalty points are added for problems that are never solved.", "So if a team solved problem one on their second submission at twenty minutes, they are charged 40 penalty points. If they submit problem 2 three times, but do not solve it, they are charged no penalty points. If they submit problem 3 once and solve it at 120 minutes, they are charged 120 penalty points. Their total score is two problems solved with 160 penalty points.", "The winner is the team that solves the most problems. If teams tie for solving the most problems,then the winner is the team with the fewest penalty points."], "image_urls": [], "input": "For the programming contest your program is judging, there are four problems. You are guaranteed that the input will not result in a tie between teams after counting penalty points.", "output": "The output consists of a single line listing the name of the team that won, the number of problems they solved, and their penalty points.", "sample_input": "4\rStars 2 20 5 0 4 190 3 220\rRockets 5 180 1 0 2 0 3 100\rPenguins 1 15 3 120 1 300 4 0\rMarsupials 9 0 3 100 2 220 3 80", "sample_output": "Penguins 3 475"},
{"number": "097", "name": "Hanoi II", "description": ["The (Three peg) Tower of Hanoi problem is a popular one in computer science. Briefly the problem is to transfer all the disks from peg-A to peg-C using peg-B as intermediate one in such a way that at no stage a larger disk is above a smaller disk. Normally, we want the minimum number of moves required for this task. The problem is used as an ideal example for learning recursion. It is so well studied that one can find the sequence of moves for smaller number of disks such as 3 or 4. A trivial computer program can find the case of large number of disks also.", "Here we have made your task little bit difficult by making the problem more flexible. Here the disks can be in any peg initially. ", "If more than one disk is in a certain peg, then they will be in a valid arrangement (larger disk will not be on smaller ones). We will give you two such arrangements of disks. You will have to find out the minimum number of moves, which will transform the first arrangement into the second one. Of course you always have to maintain the constraint that smaller disks must be upon the larger ones. "], "image_urls": ["poj/images/80/8000005010a.jpg", "poj/images/80/8000005010b.jpg"], "input": "The input file contains at most 100 test cases. Each test case starts with a positive integer N ( 1≤N≤60), which means the number of disks. You will be given the arrangements in next two lines. Each arrangement will be represented by N integers, which are 1, 2 or 3. If the i-th ( 1≤i≤N) integer is 1, you should consider that i-th disk is on Peg-A. The end of the input is indicated by a zero.. This case should not be processed. ", "output": "Output of each test case should consist of a line starting with `Case #: ' where # is the test case number. It should be followed by the minimum number of moves as specified in the problem statement. ", "sample_input": "3\r1 1 1\r2 2 2\r3\r1 2 3\r3 2 1\r0", "sample_output": "7\r3"},
{"number": "096", "name": "Arithmetic Progressions", "description": ["If a and d are relatively prime positive integers, the arithmetic sequence beginning with a and increasing by d, i.e., a, a + d, a + 2d, a + 3d, a + 4d, ..., contains infinitely many prime numbers. This fact is known as Dirichlet's Theorem on Arithmetic Progressions, which had been conjectured by Johann Carl Friedrich Gauss (1777 - 1855) and was proved by Johann Peter Gustav Lejeune Dirichlet (1805 - 1859) in 1837.", "For example, the arithmetic sequence beginning with 2 and increasing by 3, i.e.,", "    2, 5, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59, 62, 65, 68, 71, 74, 77, 80, 83, 86, 89, 92, 95, 98, ... ,", "contains infinitely many prime numbers", "    2, 5, 11, 17, 23, 29, 41, 47, 53, 59, 71, 83, 89, ... .", "Your mission, should you decide to accept it, is to write a program to find the nth prime number in this arithmetic sequence for given positive integers a, d, and n."], "image_urls": [], "input": "The input is a sequence of datasets. A dataset is a line containing three positive integers a, d, and n separated by a space. a and d are relatively prime. You may assume a <= 9307, d <= 346, and n <= 210.", "output": "The output should be composed of as many lines as the number of the input datasets. Each line should contain a single integer and should never contain extra characters.", "sample_input": "367 186 151\r179 10 203\r271 37 39\r103 230 1\r0 0 0", "sample_output": "92809\r6709\r12037\r103"},
{"number": "095", "name": "Checksum algorithm", "description": ["A checksum is an algorithm that scans a packet of data and returns a single number. The idea is that if the packet is changed, the checksum will also change, so checksums are often used for detecting transmission errors, validating document contents, and in many other situations where it is necessary to detect undesirable changes in data.", "For this problem, you will implement a checksum algorithm called Quicksum. A Quicksum packet allows only uppercase letters and spaces. It always begins and ends with an uppercase letter. Otherwise, spaces and letters can occur in any combination, including consecutive spaces.", "A Quicksum is the sum of the products of each character's position in the packet times the character's value. A space has a value of zero, while letters have a value equal to their position in the alphabet. So, A=1, B=2, etc., through Z=26. Here are example Quicksum calculations for the packets \"ACM\" and \"MID CENTRAL\":", "ACM: 1*1  + 2*3 + 3*13 = 46", "MID CENTRAL: 1*13 + 2*9 + 3*4 + 4*0 + 5*3 + 6*5 + 7*14 + 8*20 + 9*18 + 10*1 + 11*12 = 650"], "image_urls": [], "input": "The input consists of one or more packets followed by a line containing only # that signals the end of the input. Each packet is on a line by itself, does not begin or end with a space, and contains from 1 to 255 characters.", "output": "For each packet, output its Quicksum on a separate line in the output.", "sample_input": "ACM\rMID CENTRAL\rREGIONAL PROGRAMMING CONTEST\rACN\rA C M\rABC\rBBC\r#", "sample_output": "46\r650\r4690\r49\r75\r14\r15"},
{"number": "094", "name": "Redistribute wealth", "description": ["A Communist regime is trying to redistribute wealth in a village. They have have decided to sit everyone around a circular table. First, everyone has converted all of their properties to coins of equal value, such that the total number of coins is divisible by the number of people in the village. Finally, each person gives a number of coins to the person on his right and a number coins to the person on his left, such that in the end, everyone has the same number of coins. Given the number of coins of each person, compute the minimum number of coins that must be transferred using this method so that everyone has the same number of coins. "], "image_urls": [], "input": "There is a number of inputs. Each input begins with n(n<1000001), the number of people in the village. n lines follow, giving the number of coins of each person in the village, in counterclockwise order around the table. The total number of coins will fit inside an unsigned 64 bit integer. ", "output": "For each input, output the minimum number of coins that must be transferred on a single line. ", "sample_input": "3\r100\r100\r100\r4\r1\r2\r5\r4\r0", "sample_output": "0\r4"},
{"number": "093", "name": "Double", "description": ["As part of an arithmetic competency program, your students will be given randomly generated lists of from 2 to 15 unique positive integers and asked to determine how many items in each list are twice some other item in the same list. You will need a program to help you with the grading. This program should be able to scan the lists and output the correct answer for each one. For example, given the list", "1 4 3 2 9 7 18 22", "your program should answer 3, as 2 is twice 1, 4 is twice 2, and 18 is twice 9."], "image_urls": [], "input": "There will be one list of numbers per line. Each list will contain from 2 to 15 unique positive integers. No integer will be larger than 99. Each line will be terminated with the integer 0, which is not considered part of the list.", "output": "The output contain a count of the items that are double some other item. ", "sample_input": "1 4 3 2 9 7 18 22 0", "sample_output": "3"},
{"number": "092", "name": "Road trip", "description": ["Bill and Ted are taking a road trip. But the odometer in their car is broken, so they don't know how many miles they have driven. Fortunately, Bill has a working stopwatch, so they can record their speed and the total time they have driven. Unfortunately, their record keeping strategy is a little odd, so they need help computing the total distance driven. You are to write a program to do this computation.", "For example, if their log shows", "this means they drove 2 hours at 20 miles per hour, then 6-2=4 hours at 30 miles per hour, then 7-6=1 hour at 10 miles per hour. The distance driven is then (2)(20) + (4)(30) + (1)(10) = 40 + 120 + 10 = 170 miles. Note that the total elapsed time is always since the beginning of the trip, not since the previous entry in their log. "], "image_urls": ["poj/images/80/8000005007.jpg"], "input": "The input consists of one or more data sets. Each set starts with a line containing an integer n, 1 <= n <= 10, followed by n pairs of values, one pair per line. The first value in a pair, s, is the speed in miles per hour and the second value, t, is the total elapsed time. Both s and t are integers, 1 <= s <= 90 and 1 <= t <= 12. The values for t are always in strictly increasing order. A value of -1 for n signals the end of the input. ", "output": "For each input set, print the distance driven", "sample_input": "3\r20 2\r30 6\r10 7\r2\r60 1\r30 5\r-1", "sample_output": "170\r180"},
{"number": "091", "name": "Bee", "description": ["In Africa there is a very special species of bee. Every year, the female bees of such species give birth to one male bee, while the male bees give birth to one male bee and one female bee, and then they die!", "Now scientists have accidentally found one \"magical female bee\" of such special species to the effect that she is immortal, but still able to give birth once a year as all the other female bees. The scientists would like to know how many bees there will be after N years. Please write a program that helps them find the number of male bees and the total number of all bees after N years."], "image_urls": [], "input": "Each line of input contains an integer N (≥ 0). Input ends with a case where N = -1. (This case should NOT be processed.) ", "output": "Each line of output should have two numbers, the first one being the number of male bees after N years, and the second one being the total number of bees after N years. (The two numbers will not exceed 2e+32.) ", "sample_input": "1\r3\r-1", "sample_output": "1 2\r4 7"},
{"number": "090", "name": "路痴", "description": ["路痴一旦不高兴，就必然一个人漫无目的的出去走走。今天被老师训了，他又不高兴了，怎么办？那就出去走呗，反正丢不了。这次幸好记下出来时的方向，并且在一张纸上密密麻麻的记下了他拐的弯（每次拐的弯都是90度的弯），0代表左拐，1代表右拐，那么多0、1，他实在看不下去了，正好遇见聪明的你，你能告诉他，他现在面向哪吗？"], "image_urls": [], "input": "第1行输入他开始时的面对方向，和他拐弯次数n（0<n<100）。", "output": "他现在所面向的方向(West、East、North、South)", "sample_input": "East 6\r0 0 0 0 0 0", "sample_output": "West"},
{"number": "089", "name": "A*B", "description": ["设计一个程序求出A*B，然后将其结果每一位相加得到C，如果C的位数大于等于2，继续将C的各位数相加，直到结果是个一位数k。例如：", "6*8=48", "4+8=12", "1+2=3", "输出3即可。"], "image_urls": [], "input": "输入给出两个非负整数m，n（0≤m，n≤1000000000000)。", "output": "输出k。", "sample_input": "1234567 67", "sample_output": "4"},
{"number": "088", "name": "寻找规律", "description": ["小鹏在小学时最喜欢上数学课。有一次上课，数学老师布置了一道题目：给出一组有规律的整数，而且只给出前5项，求出后面5项。比如：1，2，3，4，5，□，□，□，□，□。显然这是等差数列，所以答案应该是6，7，8，9，10。老师规定规律只有三种：等差数列、等比数列、斐波那契数列（f[i]=f[i-2]+f[i-1]）；且公差、公比均为整数，所有出现的数字不会超出int范围。聪明的你，来比一比你和小鹏谁算的快。"], "image_urls": [], "input": "每行5个整数，代表题目给出的前5项，用空格分隔。", "output": "如果能找到符合条件的规律，则输出5个整数，代表后5项的值。否则，请输出NULL", "sample_input": "2 3 5 8 13", "sample_output": "21 34 55 89 144"},
{"number": "087", "name": "王的对抗", "description": ["从前有两个国家A和B。两国都是兵强马壮，国王更是威猛无比。这两个国家要争取一片金矿，都不想放弃，由于两个国家的国王都是仁爱的，害怕劳民伤财不想打仗，于是便有了个决定，决定分别派出n个人来进行比赛POJ刷题。", "国王们都知道田忌赛马这件事，于是出场的顺序都是从弱到强；每胜一场得2分，平一场得1分，输一场得0分；因为他们都不相信对方国家的人，于是就想让你来当裁判，你一定能做到，是吗？"], "image_urls": [], "input": "第1行有一个整数n（1<n<100），紧随着两行，每行有n个数分别代表有A和B国家的参赛人员的水平，数据保证都在int范围内，用空格隔开。", "output": "如果两国之间的分数相等，则输出=，输出胜的一方（A或B或=）;", "sample_input": "5\r1 2 3 4 5\r2 7 1 1 2", "sample_output": "A"},
{"number": "086", "name": "三点顺序", "description": ["现在给你不共线的三个点A、B、C的坐标，它们一定能组成一个三角形，你需要判断A、B、C是顺时针给出的还是逆时针给出的？", "如图为顺时针给出", "如图为逆时针给出"], "image_urls": ["poj/images/80/8000075009a.jpg", "poj/images/80/8000075009b.jpg"], "input": "输入6个整数x1,y1,x2,y2,x3,y3分别表示A、B、C三个点的横纵坐标。（坐标值都在0到10000之间）", "output": "如果这三个点是顺时针给出的，请输出1，逆时针给出则输出0", "sample_input": "0 0 1 1 1 3", "sample_output": "0"},
{"number": "085", "name": "操场训练", "description": ["在一个划分成网格的操场上，n个士兵散乱地站在网格点上。网格点由整数坐标(x,y)表示。士兵们可以沿网格边上、下、左、右移动一步，但在同一时刻任一网格点上只能有一名士兵。按照军官的命令，士兵们要整齐地列成一个水平队列，即排列成(x,y),(x+1,y),…,(x+n-1,y)。如何选择x 和y的值才能使士兵们以最少的总移动步数排成一列。", "计算使所有士兵排成一行需要的最少移动步数。"], "image_urls": [], "input": "第1行输入士兵数n，1≤n≤10000。接下来n行是士兵的初始位置，每行2个整数x和y，-10000≤x，y≤10000。", "output": "输出士兵排成一行需要的最少移动步数。", "sample_input": "5\r1 2\r2 2\r1 3\r3 -2\r3 3", "sample_output": "8"},
{"number": "084", "name": "不屈的小蜗", "description": ["传说中能站在金字塔顶的只有两种动物，一种是鹰，一种是蜗牛。比奇堡的小蜗听了这个传说后，大受鼓舞，立志要去爬上金字塔。为了实现自己的梦想，小蜗找到了老鹰，老鹰告诉它金字塔高H米，小蜗牛知道：白天自己能向上爬10米，但由于晚上要休息，自己会下滑5米。它想知道自己在第几天能站在金字塔顶，你帮他写个程序吧。"], "image_urls": [], "input": "输入一个整数H（0<H<1000000000）代表金字塔的高度。", "output": "输出一个整数n表示小蜗第n天站在金字塔顶上。", "sample_input": "1000", "sample_output": "199"},
{"number": "083", "name": "延伸的卡片", "description": ["你能使一叠在桌子上的卡片向外伸出多远？", "如果你有一个卡片，这张卡片最多可以向桌子外伸出卡片的一半长度（假设该卡片必须垂直于桌子），如果有两个卡片，就可以让上面的卡片向外伸出下面那张卡片的一半长度，而下面那张卡伸出桌子卡片的三分之一长度，所以两张卡片总的向外延伸1/2 + 1/3 = 5/6卡长度。以此类推，N张卡片向外延伸1/2+1/3+1/4+…+1/（n +1）卡片长度，最上面的向外延伸1/2，第二张向外延伸1/3，第三张向外延伸1/4，…，最下面一张向外延伸1 /（n +1）。如下图所示。"], "image_urls": ["poj/images/80/8000075012.jpg"], "input": "每个测试数据是一个3位正浮点数c，最小值为0.01，最大值为5.20。", "output": "输出卡片的最小数目，为整型。", "sample_input": "1.5", "sample_output": "6"},
{"number": "082", "name": "最长回文子串", "description": ["输入一个字符串，求其中最长回文子串。子串的含义是：在字符串中连续出现的字符串片段。回文的含义是：正着看和倒着看是相同的，如abba和abbebba。在判断时要求忽略所有的标点和空格，且忽略大小写，但输出时按原样输出（首尾不要输出多余的字符串）。输入字符串长度大于等于1小于等于5000，且单独占一行。"], "image_urls": [], "input": "输入一行字符串。", "output": "输出所要求的回文子串。", "sample_input": "Last Week,todo level odot,King", "sample_output": "k,todo level odot,K"},
{"number": "081", "name": "公园喷水器", "description": ["现有一块草坪，长为20米，宽为2米，要在横中心线上放置半径为Ri的喷水装置，每个喷水装置的效果都会让以它为中心的半径为实数Ri(0<Ri<15)的圆被湿润，这有充足的喷水装置i（1<i<600)个，并且一定能把草坪全部湿润，你要做的是：选择尽量少的喷水装置，把整个草坪的全部湿润。"], "image_urls": [], "input": "第1行输入一个整数n，表示共有n个喷水装置。第2行有n个实数Ri，Ri表示该喷水装置能覆盖的圆的半径。", "output": "输出所用装置的个数", "sample_input": "5\r2 3.2 4 4.5 6", "sample_output": "2"},
{"number": "080", "name": "大数加法", "description": ["编写一个程序实现A+B。不过与我们以前完成过的A+B不一样，A和B两个数的位数有近100位。注意：需要处理正负数的情形，但不考虑小数。", "提示：C或C++没有直接表示100位的数据类型，我们得自己先构造一个合适的类型，接下来还需要一些巧妙的方法处理100位数的输入和输出，因为标准输入输出同样没有这样类型的处理功能。"], "image_urls": [], "input": "分别用两行输入不超过100位的A和B（没有小数点，允许正负号）。", "output": "输出A+B的结果。", "sample_input": "3333333333333333333333333333333333\r-2222222222222222222222222222222222", "sample_output": "1111111111111111111111111111111111"},
{"number": "079", "name": "创建与遍历职工链表", "description": ["建立一个链表，每个结点包括的成员为：职工号。用一个creat函数来建立链表，用list函数来输出数据。"], "image_urls": [], "input": "第1行输入n，第2行输入n个职工号，用空格分隔。", "output": "从头节点开始输出每个结点职工号，用空格分隔。", "sample_input": "7\r101 102 103 104 105 106 107", "sample_output": "101 102 103 104 105 106 107"},
{"number": "078", "name": "大数减法", "description": ["编写一个程序实现A-B，A和B两个数的位数有近100位。注意：需要处理正负数的情形，但不考虑小数。", "提示：C或C++没有直接表示100位的数据类型，我们得自己先构造一个合适的类型，接下来还需要一些巧妙的方法处理100位数的输入和输出，因为标准输入输出同样没有这样类型的处理功能。"], "image_urls": [], "input": "分别用两行输入不超过100位的A和B（没有小数点，允许正负号）。", "output": "输出A-B的结果。", "sample_input": "3333333333333333333333333333333333\r-2222222222222222222222222222222222", "sample_output": "5555555555555555555555555555555555"},
{"number": "077", "name": "插入链表节点", "description": ["建立一个链表，每个结点包括的成员为：职工号。用一个creat函数来建立链表，用list函数来输出数据。现在新增加一个职工的数据，按职工号的顺序插入链表。写一函数insert来插入新结点。"], "image_urls": [], "input": "第1行输入n，第2行输入n个职工号（由小到大）用来创建链表，用空格分隔。第3行输入插入元素值。", "output": "输出插入后的链表。", "sample_input": "7\r101 102 103 104 105 107 108\r106", "sample_output": "101 102 103 104 105 106 107 108"},
{"number": "076", "name": "火车站", "description": ["在PushPop城中有一个著名的火车站，车站铁路如图所示。", "每辆火车都从A方向驶入车站，再从B方向驶出车站，同时它的车厢可以进行某种形式的重新组合。假设从A方向驶来的火车有N节车厢（N≤1000），分别按顺序编号为1，2，…，N。负责车厢调度的工作人员需要知道能否使它以A1，A2，…，An的顺序从B方向驶出。", "请你编写程序，用来判断能否得到指定的车厢顺序。假定在进入车站之前每节车厢之间都是不连着的，并且它们可以自行移动，直到处在B方向的铁轨上。另外假定车站可以停放任意多的车厢。但是一旦车厢进入车站，它就不能再回到A方向的铁轨上了，并且一旦它驶入B方向的铁轨后，它就不能再回到车站。"], "image_urls": ["poj/images/80/8000070012.jpg"], "input": "第1行输入N，接下来的一行是任意多个的出站重组顺序（A1，A2，…，），以0为结束标志，用空格分隔。", "output": "输出Yes表示可以把火车（1，2，…，N）火车编排成所需要的顺序（A1，A2，…，），否则用No表示。", "sample_input": "5\r1 2 3 4 5 0", "sample_output": "Yes"},
{"number": "075", "name": "排序分析", "description": ["有一个排序算法QuickSort。这个算法是将n个不同的整数由小到大进行排序，算法的操作是在需要的时候将相邻的2个数交换。例如，对于输入序列9 1 0 5 4，QuickSort产生0 1 4 5 9的结果。", "你的任务是算出QuickSort最少需要用到多少次交换操作，才能对输入的序列由小到大排序。"], "image_urls": [], "input": "第1行输入序列的个数n，第2行输入n个序列元素。", "output": "输出进行排序所做的交换操作的最少次数。", "sample_input": "5\r9 1 0 5 4", "sample_output": "6"},
{"number": "074", "name": "行程编码压缩算法", "description": ["RLE（Run Length Encoding行程编码）算法是一个简单高效的无损数据压缩算法，其基本思路是把数据看成一个线性序列，而这些数据序列组织方式分成两种情况：一种是连续的重复数据块，另一种是连续的不重复数据块。对于连续的重复数据快采用的压缩策略是用一个字节（我们称之为数据重数属性）表示数据块重复的次数，然后在这个数据重数属性字节后面存储对应的数据字节本身，例如某一个文件中有如下的数据序列AAAAA，在未压缩之前占用5个字节，而如果使用了压缩之后就变成了5A，只占用两个字节，对于连续不重复的数据序列，表示方法和连续的重复数据块序列的表示方法一样，只不过前面的数据重数属性字节的内容为1。一般的这里的数据块取一个字节，这篇文章中数据块都默认为一个字节。", "具体来讲，字符串的编码规则如下：", "在字符串中，2～9个相同的字符组成的子字符串用2个字符来编码表示。第1个字符是这一字符串的长度，为2～9。第2个字符是相同字符的值。如果一个字符串存在相同字符且多于9个的子串，就先对前9个字符进行编码，然后对其余相同字符组成的子串采用相同方法进行编码。例如AAAAAABCCCC编码为6A1B14C。", "在字符串中，如果存在某个子串，其中没有一个字符连续重复出现，就表示为以字符1开始，后面跟着这一子串，再以字符结束。如果在字符串中存在只有1个字符1出现的子串，则以两个字符1作为输出，例如12344编码为11123124。"], "image_urls": [], "input": "输入一个字符串。", "output": "输出RLE编码后的字符串。", "sample_input": "AAAAAABCCCC12344", "sample_output": "6A1B14C11123124"},
{"number": "073", "name": "链表节点删除", "description": ["编写程序建立一个链表，每个结点包括：学号、姓名、年龄，输入一个学号，如果链表中的结点包括该学号，则输出该结点内容后，并将其结点删去。"], "image_urls": [], "input": "连续输入学号int no、姓名char name[12]、年龄int age，结束学号输入0。再输入查找节点学号。", "output": "输出第1行为原链表，第2行为删除节点后的链表。", "sample_input": "101 zhang 18\r102 wang 21\r103 zhou 19\r104 chen 20\r105 huang 20\r0\r103", "sample_output": "101 102 103 104 105\r101 102 104 105"},
{"number": "072", "name": "链表动态增长或缩小", "description": ["建立一个链表，每个结点数据包括：年龄。n次输入年龄，如果链表中的结点所包含的年龄等于此年龄，则将此结点删去。否则增加一个新结点。"], "image_urls": [], "input": "第1行输入n，第2行输入n个年龄值，用空格分隔。", "output": "输出整个链表数据，用空格分隔。", "sample_input": "10\r12 16 16 17 19 20 22 27 34 22", "sample_output": "12 17 19 20 27 34"},
{"number": "071", "name": "大数乘法", "description": ["编写一个程序实现A*B，A和B两个数的位数有近100位。注意：需要处理正负数的情形，但不考虑小数。", "提示：C或C++没有直接表示100位的数据类型，我们得自己先构造一个合适的类型，接下来还需要一些巧妙的方法处理100位数的输入和输出，因为标准输入输出同样没有这样类型的处理功能。"], "image_urls": [], "input": "分别用两行输入不超过100位的A和B（没有小数点，允许正负号）。", "output": "输出A*B的结果。", "sample_input": "3333333333333\r2222222222222", "sample_output": "7407407407405925925925926"},
{"number": "070", "name": "复数", "description": ["定义下面结构表示复数：", "编写四个函数分别实现复数的和、差、积、商计算，在主函数中输入数据并调用这些函数得到复数运算结果。"], "image_urls": ["poj/images/80/8000056008.jpg"], "input": "第1行输入第1个复数的实部和虚部，第2行输入第2个复数的实部和虚部", "output": "输出数据格式为%+.2lf，输出格式如下结果显示。", "sample_input": "-1 5\r4 3", "sample_output": "(-1.00+5.00i)+(4.00+3.00i)=(3.00+8.00i)\r(-1.00+5.00i)-(4.00+3.00i)=(-5.00+2.00i)\r(-1.00+5.00i)*(4.00+3.00i)=(-19.00+17.00i)\r(-1.00+5.00i)/(4.00+3.00i)=(0.44+0.92i)"},
{"number": "069", "name": "分数加减法", "description": ["编写一个C程序，实现两个分数的加减法。"], "image_urls": [], "input": "每行数据是一个字符串，格式是“a/b+c/d”或“a/b-c/d”。其中a, b, c, d是一个0-9的整数。b、d不为0。输入数据保证合法。", "output": "对于输入数据的每一行输出两个分数的运算结果。注意结果应符合书写习惯，没有多余的符号、分子、分母，并且化简至最简分数。例如：“1/4-1/2”的结果是-1/4，“1/3-1/3”的结果是0。", "sample_input": "1/8+3/8", "sample_output": "1/2"},
{"number": "068", "name": "子字符串替换", "description": ["编写函数void replace(char *str,char *fstr,char *rstr)，将str所指字符串中凡是与fstr字符串相同的字符替换成rstr（rstr与fstr的字符长度不一定相同）。从主函数中输入原始字符串\"iffordowhileelsewhilebreak\"、查找字符串\"while\"和替换字符串\"struct\"，调用函数得到结果。"], "image_urls": [], "input": "第1行输入要替换的字符串str，第2行输入查找字符串fstr，第3行输入替换字符串rstr。", "output": "输出替换后的字符串str。", "sample_input": "iffordowhileelsewhilebreak\rwhile\rstruct", "sample_output": "iffordostructelsestructbreak"},
{"number": "067", "name": "字符串加密编码", "description": ["编写函数void strencode(char *s)；函数的功能是将字符串中的大写字母加3，小写字母减3。在主函数中输入字符串，调用函数后输出结果字符串。"], "image_urls": [], "input": "输入一行字符串。", "output": "输出编码操作后的字符串。", "sample_input": "ABCDEF", "sample_output": "DEFGHI"},
{"number": "066", "name": "搜索字符", "description": ["编写函数char* search(char *cpsource,char ch)，该函数在一个字符串中找到可能的最长的子字符串，该字符串是由同一字符组成的。从主函数中输入\"aabbcccddddeeeeeffffff\"和'e'，调用函数得到结果。"], "image_urls": [], "input": "第1行输入字符串，第2行输入字符ch。", "output": "输出子字符串", "sample_input": "aabbcccddddeeeeeffffff\re", "sample_output": "eeeee"},
{"number": "065", "name": "POJer的烦恼", "description": ["ACM队的POJer小C经常抱怨：“C语言中格式输出中有十六、十、八进制输出，却没有二进制输出，哎，谁能帮我写一个程序实现输入一个十进制数n，输出它的二进制数呀？”", "你能帮帮他吗？"], "image_urls": [], "input": "输入数据n（0≤n≤1000010000）", "output": "输出对应一个十进制数n的二进制数，注意：输出的二进制去掉任何一个多余的0。", "sample_input": "9", "sample_output": "1001"},
{"number": "064", "name": "单词频次", "description": ["编写程序统计DATA5610.TXT文件中出现\"if\",\"while\",\"for\"单词的次数。"], "image_urls": [], "input": "用记事本自行建立一个DATA5610.TXT文件，存放在源程序在相同的文件夹中，用来测试自己的程序。", "output": "分别输出\"if\",\"while\",\"for\"单词的次数，用空格分隔。例如某个文件中包含2个if,3个while,4个for单词。", "sample_input": null, "sample_output": "2 3 4"},
{"number": "063", "name": "文件比较", "description": ["已有两个文本文件（DATA5613.TXT和DATA5613.CPP），请编写程序从这两个文件中读出各行字符，逐个比较这两个文件中相应的行和列上的字符，如果遇到互不相同的字符，输出它是第几行第几列的字符。"], "image_urls": [], "input": "用记事本自行建立DATA5613.TXT和DATA5613.CPP文件，输入一些数据测试，存放在与程序相同的文件夹中。", "output": "输出互不相同字符的行和列值，一行一个字符，用空格分隔。", "sample_input": null, "sample_output": "1 7\r3 6\r7 9"},
{"number": "062", "name": "成绩表计算", "description": ["设有学生信息如下：学号（长整型）、姓名（字符串）、年龄（整型），英语、数学、语文、政治、物理、化学、计算机成绩（均为实型），总分（实型）、平均分（实型）。编写程序输入10个学生信息，计算每个学生的总分、平均分，然后输出总分最高的学生记录。"], "image_urls": [], "input": "输入10行记录，用空格分隔。", "output": "输出总分最高的学生记录，成绩保留2位小数，用空格分隔。", "sample_input": "101 zhang 18 76  83  74  80  87  95  78\r102 chen  19 86  73  83  72  66  98  60\r103 yuan  20 83  99  82  74  85  67  98\r104 zhou  21 96  64  95  94  83  71  60\r105 huang 22 84  94  83  98  77  95  95\r106 jiang 23 70  63  75  71  90  67  84\r107 ding  24 63  67  67  68  64  91  99\r108 qin   25 68  64  67  78  66  88  77\r109 deng  26 67  70  88  66  85  92  88\r110 gao   27 73  95  84  77  79  82  64", "sample_output": "105 huang 22 84.00 94.00 83.00 98.00 77.00 95.00 95.00"},
{"number": "061", "name": "插入字符", "description": ["使用字符指针编写程序，输入一个长度不超过80的字符串a，在字符串a的i处（0＜i＜80）位置插入字符x，输出插入后的字符串a。例如：输入nw world在1处插入e输出new world。"], "image_urls": [], "input": "第1行输入字符串，第2行输入字符x和i值，用空格分隔。", "output": "输出插入字符后的字符串。", "sample_input": "nw world\re 1", "sample_output": "new world"},
{"number": "060", "name": "找出数字", "description": ["输入一个字符串，内有数字和非数字字符。例如：a123x456 17960 302tab5876。将其中连续的数字作为一个整数，依次存放到一维数组a中，例如123放在a[0]，456放在a[1]……统计共有多少个整数，并输出这些数。"], "image_urls": [], "input": "输入一个字符串（允许空格）。", "output": "第1行输出个数，第2行输出多个整数，用空格分隔。", "sample_input": "a123X456  7689?89njmk32lnk123", "sample_output": "6\r123 456 7689 89 32 123"},
{"number": "059", "name": "The Clock", "description": ["Mr. N, Mr. W, Mr.P and Mr. U are now in DongDa, ChangAn, for the 2012 ACM-ICPC Campus Contest. They’ve decided to take a 5 hours training every day before the contest. Also, they plan to start training at 10:00 each day since the contest will do so. The scenery in DongDa is so attractive that Mr. N would always like to take a walk outside for a while after breakfast. However, Mr. N have to go back before training starts, otherwise his teammates will be annoyed. Here is a problem: Mr. N does not have a watch. In order to know the exact time, he has bought a new watch in DongDa, but all the numbers on that watch are represented in Roman Numerals. Mr. N cannot understand such kind of numbers. Can you translate for him?"], "image_urls": [], "input": "Each test case contains a single line indicating a Roman Numerals that to be translated. All the numbers can be found on clocks. That is, each number in the input represents an integer between 1 and 12. Roman Numerals are expressed by strings consisting of uppercase ‘I’, ‘V’ and ‘X’. See following the sample for further information.", "output": "For each test case, display a single line containing a decimal number corresponding to the given Roman Numerals.", "sample_input": "VIII", "sample_output": "8"},
{"number": "058", "name": "分离单词", "description": ["编写程序以字符串为单位，以空格或标点符号（字符串中仅含英文逗号','或小数点'.'作为标点符号）作为分隔符，对字符串中所有单词进行倒排，然后把已处理的字符串（应不含标点符号）打印出来。"], "image_urls": [], "input": "输入一个字符串（包含大小写字母、空格、逗号或小数点）", "output": "输出处理后的字符串。", "sample_input": "I am a student. I like study.", "sample_output": "study like I student a am I"},
{"number": "057", "name": "文章统计", "description": ["有一篇文章，共有3行文字，每行最多有80个字符。编写程序分别统计出文章中英文大写字母、小写字母、数字、空格及其他字符的个数。"], "image_urls": [], "input": "输入3行字符串", "output": "输出英文大写字母、小写字母、数字、空格、其他字符的个数，用空格分隔。", "sample_input": "Nikon at the frontiers of science.\rFlash(Adobe Flash Media Rights Management Server)\r21.03,-0.87,-3.97%", "sample_output": "8 62 10 10 11"},
{"number": "056", "name": "字符串左中右", "description": ["编写实现下面字符串操作要求的函数。在主函数中输入字符串\"www.nwpu.edu.cn\"，调用函数并得到结果。", "（1）函数void Left(char src[],int n,char dest[])将字符串src左边n个字符复制到dest中。", "（2）函数void Right(char src[],int n,char dest[])将字符串src右边n个字符复制到dest中。", "（3）函数void Mid(char src[],int loc,int n,char dest[])将字符串src自下标loc开始的n个字符复制到dest中。"], "image_urls": [], "input": "第1行输入字符串，第2行输入n和loc值，用空格分隔。", "output": "第1行输出调用函数Left的结果，第2行输出调用函数Right的结果，第3行输出调用函数Mid的结果", "sample_input": "www.nwpu.edu.cn\r5 5", "sample_output": "www.n\rdu.cn\rwpu.e"},
{"number": "055", "name": "Music Composer", "description": ["Mr. B is a famous music composer. One of his most famous work was his set of preludes. These 24 pieces span the 24 musical keys (there are musically distinct 12 scale notes, and each may use major or minor tonality). The 12 distinct scale notes are:", "Five of the notes have two alternate names, as is indicated above with equals sign. Thus, there are 17 possible names of scale notes, but only 12 musically distinct notes. When using one of these as the keynote for a musical key, we can further distinguish between major and minor tonalities. This gives 34 possible keys, of which 24 are musically distinct.", "In naming his preludes, Mr. B used all the keys except the following 10, which were named instead by their alternate names:", "Write a program that, given the name of a key, give an alternate name if it has one, or report the key name is unique."], "image_urls": ["poj/images/80/8000046000a.jpg", "poj/images/80/8000046000b.jpg"], "input": "Each test case is described by one line having the format “note tonality”, where “note” is one of the 17 names for the scale notes given above, and “tonality” is either “major” or “minor” (quotes for clarify).", "output": "For each case output the required answer, following the format of the sample.", "sample_input": "Ab minor", "sample_output": "G# minor"},
{"number": "054", "name": "字符串替换", "description": ["编写一个程序实现将字符串中的所有”you”替换成”we”"], "image_urls": [], "input": "输入数据是一个字符串，长度不超过1000", "output": "对于输入的每一行，输出替换后的字符串", "sample_input": "you are what you do", "sample_output": "we are what we do"},
{"number": "053", "name": "字符串比较", "description": ["请编写一个函数int stringcompare(char S1[],char S2[])，将两个字符串S1和S2比较。如果S1＞S2，输出一个正数；S1=S2，输出0；S1＜S2，输出一个负数。在主函数两个字符串用gets函数读入。输出的正数或负数的绝对值应是相比较的两个字符串相对应字符的ASCII码的差值。例如，’A’与’C’相比，由于’A’＜’C’，应输出负数，由于’A’与’C’的码差值为2，因此应输出“－2”。同理：“And”和“Aid:”比较，根据第2个字符比较结果，’n’比’i’大5，因此应输出“5”。"], "image_urls": [], "input": "第1行输入S1，第2行输入S2。", "output": "输出为整型。", "sample_input": "And\rAid", "sample_output": "5"},
{"number": "052", "name": "字符串逆序", "description": ["请编写程序，对键盘输入的字符串进行逆序，逆序后的字符串仍然保留在原来字符数组中，最后输出。（不得调用任何字符串处理函数），例如：输入 输出。"], "image_urls": [], "input": "输入字符串时，输入以等号（=）结束（注意不是回车）", "output": "输出为字符串。", "sample_input": "hello world=\rdlrow olleh", "sample_output": "dlrow olleh"},
{"number": "051", "name": "Coin Test", "description": ["As is known to all,if you throw a coin up and let it droped on the desk there are usually three results. Yes,just believe what I say ~it can be the right side or the other side or standing on the desk, If you don’t believe this,just try In the past there were some famous mathematicians working on this .They repeat the throwing job once again. But jacmy is a lazy boy.He is busy with dating or playing games.He have no time to throw a single coin for 100000 times. Here comes his idea,He just go bank and exchange thousands of dollars into coins and then throw then on the desk only once. The only job left for him is to count the number of coins with three conditions.", "He will show you the coins on the desk to you one by one. Please tell him the possiblility of the coin on the right side as a fractional number if the possiblity between the result and 0.5 is no larger than 0.003. BE CAREFUL that even 1/2，50/100,33/66 are equal only 1/2 is accepted ! if the difference between the result and 0.5 is larger than 0.003,Please tell him “Fail”.Or if you see one coin standing on the desk,just say “WA” any way."], "image_urls": [], "input": "The input is the result with N litters(1＜N＜1000).The letter are “U”,”D”,or “S”,”U” means the coin is on the right side. “D” means the coin is on the other side .”S” means standing on the desk.", "output": "If test successeded,just output the possibility of the coin on the right side.If the test failed please output “Fail”,If there is one or more”S”,please output “WA”", "sample_input": "UUUDDD", "sample_output": "1/2"},
{"number": "050", "name": "左上角", "description": ["输出一个NxN（1≤N≤100）二维数组A左上角的元素（元素值不超过9）。"], "image_urls": [], "input": "第1行输入整型n，第2行给A输入nxn个整型数据，元素之间用空格隔开。", "output": "按要求输出A左上角的元素，确保行列对齐，元素之间用空格隔开。", "sample_input": "3\r1 2 3 4 5 6 7 8 9", "sample_output": "1 2 3\r4 5\r7"},
{"number": "049", "name": "左下角", "description": ["输出一个NxN（1≤N≤100）二维数组A左下角的元素（元素值不超过9）。"], "image_urls": [], "input": "第1行输入整型n，第2行给A输入nxn个整型数据，元素之间用空格隔开。", "output": "按要求输出A左上角的元素，确保行列对齐，元素之间用空格隔开。", "sample_input": "3\r1 2 3 4 5 6 7 8 9", "sample_output": "1\r4 5\r7 8 9"},
{"number": "048", "name": "一维数组“赋值”", "description": ["有两个N（1≤N≤100）个元素的数组A和B，其中A来自输入，将其“赋值”给B（即元素一一复制到B中），输出B数组下标为奇数的元素。"], "image_urls": [], "input": "第1行输入整型n，第2行给A输入n个整型数据，元素之间用空格隔开。", "output": "输出B数组指定元素，元素之间用空格隔开。", "sample_input": "5\r1 2 3 4 5", "sample_output": "2 4"},
{"number": "047", "name": "二分查找", "description": ["有一个N（1≤N≤100）个元素的数组A，按由小到大顺序存放。请编写程序，输入一个数m，用二分查找法找出该数在数组中的位置（即数组的下标）。如果该数不在数组中，则输出null。"], "image_urls": [], "input": "第1行输入n，第2行输入n个已排好序的数组元素，数据之间用空格分隔。第3行输入m。", "output": "若找到输出它数组的下标，否则输出null", "sample_input": "15\r1 4 9 13 21 34 55 89 144 233 377 570 671 703 812\r34", "sample_output": "5"},
{"number": "046", "name": "冒泡排序", "description": ["编写一个函数void BubbleSort(int A[],int s,int m)，能够从数组A第s个（以0为开始）元素起始，连续m个元素使用冒泡法降序排序。数组A最多有N（1≤N≤100）个元素，0≤s＜N，且s+m≤N。在主函数输入输出，调用函数BubbleSort求解。"], "image_urls": [], "input": "第1行输入整型n，第2行给A输入n个整型数据，第3行输入s和m，数据之间用空格隔开。", "output": "输出排序后的数组A，用空格隔开。", "sample_input": "10\r1 2 3 4 5 6 7 8 9 10\r1 8", "sample_output": "1 9 8 7 6 5 4 3 2 10"},
{"number": "045", "name": "恐怖水母", "description": ["比基堡海滩有一个有n个触手的恐怖水母，蟹老板希望雇佣一些海绵宝宝把它杀死（即砍掉所有触手）。现在有m个海绵宝宝可以雇佣，一个能力值为x的海绵宝宝可以砍掉恐怖水母一只直径不超过x的触手，且需要支付x个金币。如何雇佣海绵宝宝才能杀死水母，并且支付的金币最少？需要注意一个海绵宝宝只能砍掉一只触手，并且不能被雇佣两次。"], "image_urls": [], "input": "第1行为正整数n和m，第2行为水母n只触手的直径，第3行为m个海绵宝宝的能力值，所有数据用空格间隔。", "output": "输出最少金币数。如果无解，输出NULL", "sample_input": "2 3\r5 4\r7 8 4", "sample_output": "11"},
{"number": "044", "name": "一维数组“加法”", "description": ["输入两个N（1≤N≤100）个元素的数组A和B，实现它们的“加法”（即对应元素一一相加），并“赋值”给同样的C数组，输出C数组。"], "image_urls": [], "input": "第1行输入整型n，第2行给A输入n个整型数据，第3行给B输入n个整型数据，元素之间用空格隔开。", "output": "输出“加法”结果，即C数组，元素之间用空格隔开。", "sample_input": "5\r1 2 3 4 5\r5 4 3 2 1", "sample_output": "6 6 6 6 6"},
{"number": "043", "name": "快速排序", "description": ["编写一个函数void QuickSort(int A[100],int s,int m)，能够从数组A第s个（以0为开始）元素起始，至第m个元素结束使用快速排序降序排序。数组A最多有N（1≤N≤100）个元素，0≤s＜N，且s+m≤N。在主函数输入输出，调用函数QuickSort求解。"], "image_urls": [], "input": "第1行输入整型n，第2行给A输入n个整型数据，第3行输入s和m，数据之间用空格隔开。", "output": "输出排序后的数组A，用空格隔开。", "sample_input": "10\r1 2 3 4 5 6 7 8 9 10\r1 8", "sample_output": "1 9 8 7 6 5 4 3 2 10"},
{"number": "042", "name": "右上角", "description": ["输出一个NxN（1≤N≤100）二维数组A右上角的元素（元素值不超过9）。"], "image_urls": [], "input": "第1行输入整型n，第2行给A输入nxn个整型数据，元素之间用空格隔开。", "output": "按要求输出A左上角的元素，确保行列对齐，元素之间用空格隔开。", "sample_input": "3\r1 2 3 4 5 6 7 8 9", "sample_output": "1 2 3\r  5 6\r    9"},
{"number": "041", "name": "山迪的麻烦", "description": ["山迪要出席一个周末表演晚会，他在会上要表演卡片魔术。他有n（0＜n≤100）张卡片，每张卡片上都标明了1～1000之间的某个数字，这n张卡片本来是有序的，可是山迪的助手不小心把卡片打乱了。这可急坏了山迪，忙令助手迅速通过一些操作把这些卡片变回有序的，而山迪的助手是个思想简单的人，他能做的操作只有一种：交换任意两张卡片的位置。", "现在，山迪想知道助手最少交换几次可以达到目的，以便尽快决定是否替换这个魔术表演，聪明的你能帮助他么？"], "image_urls": [], "input": "第1行是一个正整数n，第2行n个是打乱顺序后、每张卡片上的数字。", "output": "输出所需要的最少交换次数", "sample_input": "5\r1 4 7 8 3", "sample_output": "3"},
{"number": "025", "name": "分数化小数", "description": ["输入正整数a、b、c，输出a/b的小数形式，精确到小数点后c位。其中a、b≤1000000，c≤100。注意：本题有数据陷进。"], "image_urls": [], "input": "输入正整数a、b、c，用空格隔开", "output": "输出计算结果，小数点后c位", "sample_input": "1 6 4", "sample_output": "0.1667"},
{"number": "024", "name": "粒子裂变", "description": ["核反应堆中有α和β两种粒子，每秒钟内一个α粒子可以裂变为3个β粒子，而一个β粒子可以裂变为1个α粒子和2个β粒子。若在t=0时刻的反应堆中只有一个α粒子，求在t秒时反应堆裂变产生的α粒子和β粒子数。"], "image_urls": [], "input": "输入t，为整型", "output": "输出在t秒时反应堆裂变产生的α粒子和β粒子数，为整型，用空格隔开", "sample_input": "6", "sample_output": "183 546"},
{"number": "023", "name": "羊羊聚会", "description": ["青青草原上的美羊羊最近在网上相识了非洲部落的沸羊羊，它们聊得很开心，于是觉得有必要见一面。它们很高兴地发现它们住在同一条纬度线上，于是它们约定各自朝西走，直到碰面为止。", "可是它们出发之前忘记了一件很重要的事情，既没有问清楚对方的特征，也没有约定见面的具体位置。不过羊羊们很乐观，它们觉得只要一直朝着某个方向走下去，总能碰到对方。但是除非这两只羊在同一时间走到同一点上，不然永远都不可能碰面。为了帮助这两只乐观的羊，你被要求写一个程序来判断这两只羊是否能够碰面，会在什么时候碰面。", "规定纬度线上东经0度处为原点，由东往西为正方向，单位长度1米，这样我们就得到了一条首尾相接的数轴。设美羊羊的出发点坐标是x，沸羊羊的出发点坐标是y。美羊羊一小时能走a米，沸羊羊一次能走b米。纬度线总长L米。求出它们走了多少小时以后才会碰面。"], "image_urls": [], "input": "输入一行5个整数x，y，a，b，L，其中x≠y ＜2000000000，0＜a、b＜2000000000，0＜L＜2100000000。", "output": "输出碰面所需要的跳跃次数，如果永远不可能碰面则输出impossible", "sample_input": "1 2 3 4 5", "sample_output": "4"},
{"number": "022", "name": "分数拆分", "description": ["输入正整数k，找出所有的正整数x≥y，使得"], "image_urls": ["poj/images/80/8000022020.jpg"], "input": null, "output": null, "sample_input": "4", "sample_output": "1/4=1/20+1/5\r1/4=1/12+1/6\r1/4=1/8+1/8"},
{"number": "021", "name": "最大乘积", "description": ["输入n个元素组成的序列S，你需要找出一个乘积最大的连续子序列。如果这个最大的乘积不是正数，输出-1表示无解。1≤n≤18，-10≤Si≤10。"], "image_urls": [], "input": "第1行输入n，整数", "output": "输出最大乘积，若无解输出-1", "sample_input": "5\r2 5 -1 2 -1", "sample_output": "20"},
{"number": "020", "name": "自然数立方的乐趣", "description": ["编写程序验证下列结论：任何一个自然数n的立方都等于n个连续奇数之和。例如：", "要求程序对每个输入的自然数计算并输出相应的连续奇数。"], "image_urls": ["poj/images/80/8000022011.jpg"], "input": "输入自然数n为整数。", "output": "输出n个连续奇数之和，格式如Sample Output显示。", "sample_input": "5", "sample_output": "5*5*5=125=21+23+25+27+29"},
{"number": "019", "name": "迭代求根", "description": [], "image_urls": ["poj/images/80/8000022001.jpg"], "input": "输入a为实型", "output": "输出根为实型，保留五位小数。", "sample_input": "2", "sample_output": "1.41421"},
{"number": "018", "name": "二分求根", "description": ["请编写程序，用二分法求下面方程在(－10，10)之间的根："], "image_urls": ["poj/images/80/8000022002.jpg"], "input": "输入区间数据为实型、用空格隔开输出均。", "output": "输出根为实型，保留两位小数。", "sample_input": "-10 10", "sample_output": "2.00"},
{"number": "017", "name": "区间内素数", "description": ["编写程序计算500～800区间内素数的个数cnt，并按所求素数的值从大到小的顺序，再计算其间隔减、加之和，即第1个素数－第2个素数+第3个素数－第4个素数+第5个素数……的值sum。"], "image_urls": [], "input": null, "output": "一行内输出cnt和sum，用空格隔开。", "sample_input": null, "sample_output": "44 130"},
{"number": "016", "name": "最次方数", "description": ["编写程序求一个整数的任意次方的最后三位数。即："], "image_urls": ["poj/images/80/8000022012.jpg"], "input": "输入均为整型，首先为x，其后为a，用空格隔开。", "output": "输出为整型。", "sample_input": "13 13", "sample_output": "253"},
{"number": "015", "name": "两个整数之间所有的素数", "description": ["编写程序，求任意两个整数之间所有的素数。"], "image_urls": [], "input": "输入两个整数，用空格间隔。注意输入的两个整数谁大谁小是任意的。", "output": "输出数据占一行，用空格间隔。", "sample_input": "100 130", "sample_output": "101 103 107 109 113 127"},
{"number": "014", "name": "五猴分桃", "description": ["5只猴子一起摘了1堆桃子。因为太累了，它们商量决定，先睡一觉再分。过了不知多久，1只猴子来了。它见别的猴子没来，便将这1堆桃子平均分成5份，结果多了1个，就将多的这个吃了，拿走其中的1堆。又过了不知多久，第2只猴子来了。它不知道有1个同伴已经来过，还以为自己是第1个到的呢。于是将地上的桃子堆起来，平均分成5份，发现也多了1个，同样吃了这1个，拿走其中的1堆。第3只、第4只、第5只猴子都是这样……问这5只猴子至少摘了多少个桃子？第5个猴子走后还剩下多少个桃子？"], "image_urls": [], "input": null, "output": "输出5只猴子至少摘了多少个桃子，第5个猴子走后还剩下多少个桃子。中间用空格隔开。", "sample_input": null, "sample_output": "3121 1020"},
{"number": "013", "name": "多项式的猜想", "description": [], "image_urls": ["poj/images/80/8000022013.jpg"], "input": null, "output": "输出三行对应的n值。", "sample_input": null, "sample_output": "6\r9\r11"},
{"number": "012", "name": "整数位数", "description": ["编写程序输入一个数，输出其整数部分的位数（例如输入123.4则输出3，输入－0.6则输出0）。"], "image_urls": [], "input": "输入为实型。", "output": "输出为整型。", "sample_input": "123.4", "sample_output": "3"},
{"number": "011", "name": "级数和", "description": ["编写程序求下面级数前n项的和，其中n从键盘上输入。"], "image_urls": ["poj/images/80/8000022009.jpg"], "input": "输入n为整型。", "output": "输出和为实型，保留六位小数。", "sample_input": "5", "sample_output": "0.338462"},
{"number": "010", "name": "求建筑高度", "description": ["有4个圆塔，圆心分别为(2，2)、(-2，2)、(2，-2)、(-2，-2)，圆半径为1。这4个塔的高度为10m。塔以外无建筑物。请编写程序，输入任一点的坐标，求该点的建筑高度(塔外的高度为零)。"], "image_urls": ["poj/images/80/8000010009.jpg"], "input": "输入为实型，以”,”隔开", "output": "输出为整型", "sample_input": "2,2.5", "sample_output": "10"},
{"number": "009", "name": "成绩转换", "description": ["百分制成绩转换为五分制成绩，转换规则为：90～100：A；80～89：B；70～79：C；60～69：D；60分以下：E。输入百分制成绩，输出对应的五分制成绩。"], "image_urls": [], "input": "输入为整型", "output": "输出为字符型", "sample_input": "87", "sample_output": "B"},
{"number": "008", "name": "是该年的第几天？", "description": ["输入一个日期(YYYY-MM-DD)输入一个日期，判断是这一年的第几天？"], "image_urls": [], "input": "输入为整型，以”-”隔开", "output": "输出为整型", "sample_input": "2013-6-17", "sample_output": "168"},
{"number": "007", "name": "出租车费", "description": ["西安出租车的收费标准：起步价（2公里以内，含2公里）为7元钱，超过2公里且在15公里以内（含15公里）时每公里收费1.5元，超过15公里时每公里收费2.1元，不足1公里按照1公里收费。"], "image_urls": [], "input": "输入为实型(单位为公里)", "output": "输出为实型，保留六位小数(单位为元)", "sample_input": "9.2", "sample_output": "19.000000"},
{"number": "006", "name": "奖金发放", "description": ["企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？"], "image_urls": [], "input": "输入为实型(单位为万元)", "output": "输出为实型，保留六位小数(单位为万元)", "sample_input": "35", "sample_output": "2.500000"},
{"number": "005", "name": "找幸运数", "description": ["如果一个整数逆序后得到的数值和原数值相同，则称之为幸运数。输入一个整数N（N＜100000）判断是否为幸运数，是的话输出”yes”，否则输出”no”。"], "image_urls": [], "input": "输入一个整数", "output": "输出为字符串", "sample_input": "1234", "sample_output": "no"},
{"number": "004", "name": "找最大数", "description": ["找出三个数据A，B，C中的最大数"], "image_urls": [], "input": "输入为整型，用空格分隔", "output": "输出为整型", "sample_input": "100 29 712", "sample_output": "712"},
{"number": "003", "name": "计算成绩", "description": ["输入某学生的数学、英语和C语言课程成绩，输出该学生三门课总成绩和平均成绩"], "image_urls": [], "input": "输入为实型，用空格分隔", "output": "输出为实型，保留六位小数，结果每行输出一个", "sample_input": "90 82 74", "sample_output": "246.000000\r82.000000"},
{"number": "002", "name": "圆及圆球等的相关计算", "description": ["输入圆半径r和圆柱高h，计算圆周长l、圆面积s、圆球表面积sq、圆球体积vq和圆柱体积vz"], "image_urls": [], "input": "输入实型，用空格分隔", "output": "按顺序输出圆周长、圆面积、圆球表面积、圆球体积、圆柱体积，保留2位小数，结果每行输出一个", "sample_input": "1.5 3", "sample_output": "9.42\r7.07\r28.27\r14.14\r21.21"}
]